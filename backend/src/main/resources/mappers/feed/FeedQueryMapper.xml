<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.sixmycat.catchy.feature.feed.query.mapper.FeedQueryMapper">

    <!-- 1. 피드 기본 정보 -->
    <select id="findFeedBaseInfo" resultType="com.sixmycat.catchy.feature.feed.query.dto.response.FeedBaseInfo">
        SELECT
        f.id,
        m.id AS authorId,
        m.nickname,
        m.profile_image AS profileImageUrl,
        f.content,
        f.music_url AS musicUrl,
        (SELECT COUNT(*) FROM `like` l WHERE l.target_id = f.id AND l.target_type = 'FEED') AS likeCount,
        (SELECT COUNT(*) FROM comment c WHERE c.target_id = f.id AND c.target_type = 'FEED') AS commentCount,
        f.created_at
        FROM feed f
        JOIN member m ON f.member_id = m.id
        WHERE f.id = #{feedId}
    </select>

    <!-- 2. 이미지 URL 리스트 -->
    <select id="findFeedImageUrls" resultType="string">
        SELECT image_url
        FROM feed_image
        WHERE feed_id = #{feedId}
        ORDER BY sequence ASC
    </select>

    <!-- 3. 최근 댓글 1개 -->
    <select id="findLatestCommentPreview" resultType="com.sixmycat.catchy.common.dto.CommentPreview">
        SELECT
        m.nickname AS userNickname,
        c.content
        FROM comment c
        JOIN member m ON c.member_id = m.id
        WHERE c.target_id = #{feedId}
        AND c.target_type = 'FEED'
        ORDER BY c.created_at DESC
        LIMIT 1
    </select>

    <!-- 4. 좋아요 여부 -->
    <select id="isFeedLikedByUser" resultType="boolean">
        SELECT EXISTS (
        SELECT 1
        FROM `like`
        WHERE member_id = #{userId}
        AND target_id = #{feedId}
        AND target_type = 'FEED'
        )
    </select>

    <!-- 5. 댓글 목록 조회 -->
    <select id="findCommentsByFeedId" resultType="com.sixmycat.catchy.feature.feed.query.dto.response.FeedCommentResponse">
        SELECT
        c.id AS commentId,
        c.member_id AS memberId,
        m.nickname,
        c.content,
        c.created_at,
        c.parent_comment_id AS parentCommentId
        FROM comment c
        JOIN member m ON c.member_id = m.id
        WHERE c.target_id = #{feedId}
        AND c.target_type = 'FEED'
        ORDER BY c.created_at ASC
    </select>

    <select id="existsByFeedId" resultType="boolean">
        SELECT EXISTS (
        SELECT 1 FROM feed WHERE id = #{feedId}
        )
    </select>
  
    <select id="findMyFeeds" resultType="com.sixmycat.catchy.feature.feed.query.dto.response.FeedSummaryResponse">
        SELECT
        f.id AS feedId,
        (
        SELECT fi.image_url
        FROM feed_image fi
        WHERE fi.feed_id = f.id
        ORDER BY fi.sequence ASC
        LIMIT 1
        ) AS thumbnailUrl,
        f.created_at
        FROM feed f
        WHERE f.member_id = #{memberId}
        AND f.deleted_at IS NULL
        ORDER BY f.created_at DESC
    </select>

    <select id="findFeedsByMemberId" resultType="com.sixmycat.catchy.feature.feed.query.dto.response.FeedSummaryResponse">
        SELECT
        f.id AS feedId,
        (
        SELECT fi.image_url
        FROM feed_image fi
        WHERE fi.feed_id = f.id
        ORDER BY fi.sequence ASC
        LIMIT 1
        ) AS thumbnailUrl,
        f.created_at
        FROM feed f
        WHERE f.member_id = #{memberId}
        AND f.deleted_at IS NULL
        ORDER BY f.created_at DESC
    </select>

    <select id="findLikedFeeds" resultType="com.sixmycat.catchy.feature.feed.query.dto.response.FeedSummaryResponse">
        SELECT
        f.id AS feedId,
        (
        SELECT fi.image_url
        FROM feed_image fi
        WHERE fi.feed_id = f.id
        ORDER BY fi.sequence ASC
        LIMIT 1
        ) AS thumbnailUrl,
        f.created_at
        FROM feed f
        JOIN `like` l ON l.target_id = f.id
        WHERE l.member_id = #{memberId}
        AND l.target_type = 'FEED'
        AND f.deleted_at IS NULL
        ORDER BY f.created_at DESC
    </select>


    <select id="findFeedList" resultType="com.sixmycat.catchy.feature.feed.query.dto.response.FeedBaseInfo">
        SELECT
        f.id AS id,
        m.id AS authorId,
        m.nickname,
        m.profile_image AS profileImageUrl,
        f.content,
        f.music_url AS musicUrl,
        (SELECT COUNT(*) FROM `like` l WHERE l.target_id = f.id AND l.target_type = 'FEED') AS likeCount,
        (SELECT COUNT(*) FROM comment c WHERE c.target_id = f.id AND c.target_type = 'FEED') AS commentCount,
        f.created_at
        FROM feed f
        JOIN member m ON f.member_id = m.id
        WHERE f.deleted_at IS NULL
        AND (
        #{memberId} IS NULL
        OR NOT EXISTS (
        SELECT 1
        FROM block b
        WHERE b.blocker_id = #{memberId}
        AND b.blocked_id = f.member_id
        )
        )
        ORDER BY f.created_at DESC
    </select>


</mapper>